These are the files associated with my thesis, "Graph-Based Mapping for Knowledge Transfer in General Game Playing".
If you have questions regarding this code or the underlying methods, I can be contacted at joshjung(at)live.ca

This project is dependent on Stanford's ggp-base repository, which can be found at: https://github.com/ggp-org/ggp-base
The Apache Commons Math library is also required, and may be found at: https://commons.apache.org/proper/commons-math/download_math.cgi
Non-essential graph visualization tools make use of the Java Universal Network/Graph Framework, which can be downloaded from http://jung.sourceforge.net/download.html


In order to run an experiment, you must run two files in order:
  1. AutoPlayer, which will create players for the game
  2. Server (located in ggp-base\src\main\java\org\ggp\base\apps\server), which will create a GUI allowing you to choose a game and select time controls. Base checkers and Small Board checkers belong to the games.ggp.org/base repository. All other checkers variants included in the paper are local (those placed in ggp-base\games\games).
  


AutoPlayer.java: Run this to generate agents for testing. It is a modified version of the Player.java file included in the base repository that allows agents to be initialized with parameters as UCT, SI-GMCTS, or TI-GMCTS
HeuristicDataLibrary.java: Run this to read MCT data saved from separate game instances and calculate heuristic parameters. Corresponds to the "Archiving Information" subsection of the paper.
ReducedMCTNode: Node generated when read out of an archive.
ReducedMCTree: Collection of nodes read from an archive.
RegressionRecord: Contains regression information loaded from file.
TestGamer: The primary file implementing most of the new methods described in the paper. Can produce a UCT, SI-GMCTS, or TI-GMCTS agent, based on parameters.

The following Java files are dependencies of the above files.
ContextEditDistance: Implementation of the mapping algorithms described in Chapter 3.
GdlAnd: Implements a rule graph node for "and"
MCTNode: Node representing one visited state during MCTS.
MyUtil: Various utility and mathematics functions.
Pair: Implements a Pair<X,Y> data structure.
RuleGraph: Representation of a whole rule graph.
RuleGraphRecord: Contains rule graph information read from file.
RuleNode: Representation of a single node in a rule graph.
StateMapping: Contains the and supports queries of the mapping information generated by ContextEditDistance.
StateNode: Deprecated class for representing a state. To be removed in published version.
