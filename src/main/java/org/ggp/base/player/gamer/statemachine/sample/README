These are the files needed to reproduce the work in "Cross-Domain State Transfer for General Game Playing", submitted to AAAI 2023.

This project is dependent on Stanford's ggp-base repository, which can be found at: https://github.com/chuchro3/ggp-base
Non-essential graph visualization tools make use of the Java Universal Network/Graph Framework, which can be downloaded from http://jung.sourceforge.net/download.html

The java files contained in this Zip file should be placed into: ggp-base\src\main\java\org\ggp\base\player\gamer\statemachine\sample
The files in the games directory should be placed into: ggp-base\games\games
The files in the data directory should be placed directly into ggp-base.


In order to run an experiment, you must run two files in order:
  1. AutoPlayer, which will create players for the game
  2. Server (located in ggp-base\src\main\java\org\ggp\base\apps\server), which will create a GUI allowing you to choose a game and select time controls. Base checkers and Small Board checkers belong to the games.ggp.org/base repository. All other checkers variants included in the paper are local (those placed in ggp-base\games\games).
  

The following Java files directly correspond to work done for this paper.
AutoPlayer.java: Run this to generate agents for testing. It is a modified version of the Player.java file included in the base repository that allows agents to be initialized with parameters (e.g. which of S, R, and A are active)
MCTMerger.java: Run this to combine MCT data saved from separate game instances into one combined archive. Corresponds to the "Archiving Information" subsection of the paper.
ReducedMCTNode: Node generated when read out of an archive.
ReducedMCTree: Collection of nodes read from an archive.
TestGamer: The primary file implementing most of the new methods described in the paper. Produces a transfer-augmented agent.

The following Java files are dependencies of the above files.
ContextEditDistance: Implementation of the mapping algorithms described in (Jung and Hoey 2021).
GdlAnd: Implements a rule graph node for "and"
MCTNode: Node representing one visited state during MCTS.
MyUtil: Various utility and mathematics functions.
RuleGraph: Representation of a whole rule graph.
RuleNode: Representation of a single node in a rule graph.
StateMapping: Contains the and supports queries of the mapping information generated by ContextEditDistance.
StateNode: Deprecated class for representing a state. To be removed in published version.